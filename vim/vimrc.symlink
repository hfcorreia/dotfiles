"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Dont use vi-compatible mode
set nocompatible
filetype off

" Set the runtime
set rtp+=~/.dotfiles/vim/.vundle.vim
call vundle#begin()

" Manage the plugins
Plugin 'VundleVim/Vundle.vim'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Solarized colorscheme
Plugin 'altercation/vim-colors-solarized'

" Status line
Plugin 'itchyny/lightline.vim'

" Fuzzy finder
Plugin 'kien/ctrlp.vim'

" Rainbow parenthesis
Plugin 'kien/rainbow_parentheses.vim'

" Supertab completion
Plugin 'ervandew/supertab'

" Identation guidlines
Plugin 'Yggdroot/indentLine'

" Easy comments
Plugin 'scrooloose/nerdcommenter'

" File explorer
Plugin 'scrooloose/nerdtree'

" Move quicker
Plugin 'easymotion/vim-easymotion'

" Add relative numbers
Plugin 'myusuf3/numbers.vim'

" Fix whitespace
Plugin 'bronson/vim-trailing-whitespace'

" Line with buffer names
Plugin 'bling/vim-bufferline'

" Repeat
Plugin 'tpope/vim-repeat'

" CSS, SASS runtime files
Plugin 'tpope/vim-haml'

" JavaScript
Plugin 'pangloss/vim-javascript'

" React
Plugin 'mxw/vim-jsx'

" Test the code
Plugin 'scrooloose/syntastic'

" Json
Plugin 'elzr/vim-json'

" Delimate
Plugin 'Raimondi/delimitMate'

" Surround vim
Plugin 'tpope/vim-surround'

" Ultisnipets
Plugin 'SirVer/ultisnips'

" Wakatime
Plugin 'wakatime/vim-wakatime'

call vundle#end()            " required
filetype plugin indent on    " required
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable filetype plugin
filetype plugin on
filetype indent on

" Set default shell
set shell=/bin/zsh

" Set history limit
set history=1000

" Show current position
set ruler

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ingnore case when searching
set ignorecase
set smartcase

" Incremental search
set incsearch

" Show matching bracets
set showmatch

" Set numbers
set nu

" Better command autocompletion
set wildmenu

" No redraw
set lazyredraw

" No linespace between rows
set linespace=0

" For regular expressions
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Always display status line
set laststatus=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text files config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,BufReadPost,FileType *.md set filetype=markdown
autocmd BufRead,FileType gitcommit,*.md,*.txt,*.tex set wrap
autocmd BufRead,FileType gitcommit,*.md,*.txt,*.tex set nonumber
autocmd BufRead,FileType gitcommit,*.md,*.txt,*.tex set textwidth=0
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell Checks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatic spellchek
autocmd BufRead,BufNewFile,FileType gitcommit,*.md,*.txt,*.tex  setlocal spell
set complete+=kspell
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax hl
syntax on

" Enable Solarized colorschem
silent!  colorscheme solarized

" Set background
set background=dark

" Set enconding as utf8
set encoding=utf8
scriptencoding utf-8

set t_Co=256

if has("gui_running")
  set guifont=Monaco
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=l
  set guioptions-=b
  set guioptions-=L
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files and backup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn off backup
set nobackup
set nowb
set noswapfile

" Look for tags
:set tags=./tags,./../tags,./*/tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs and indent
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Expands tab
set expandtab

" Auto-indent
set ai
set si
set ci

" Auto-indent amount
set shiftwidth=2
set shiftround

" Tabs
set tabstop=2
set softtabstop=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Define the map leader
let mapleader = "\<Space>"

" Stop using <esc>
inoremap jk <esc>
inoremap <esc> <nop>

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" List Buffer
map <leader>i mzgg=G`z<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins Config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lightline
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic' ], [ 'lineinfo', 'percent'], [ 'bufferline' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightLineFilename',
      \   'fugitive': 'LightLineFugitive',
      \   'ctrlpmark': 'CtrlPMark',
      \   'bufferline': 'LightLineBufferline',
      \   'mode': 'LightLineMode'
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ }
      \ }

let g:bufferline_echo = 0
function! LightLineBufferline()
  call bufferline#refresh_status()
  let b = g:bufferline_status_info.before
  let c = g:bufferline_status_info.current
  let a = g:bufferline_status_info.after
  return b . c . a
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return  fname == 'ControlP' ? 'CtrlP' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineFilename()
  return ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2'
      \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" Ctrl-P
let g:ctrlp_by_filename = 1
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:5,results:5'

" Rainbow
let g:rbpt_colorpairs = [
      \ [ '13', '#6c71c4'],
      \ [ '5',  '#d33682'],
      \ [ '1',  '#dc322f'],
      \ [ '9',  '#cb4b16'],
      \ [ '3',  '#b58900'],
      \ [ '2',  '#859900'],
      \ [ '6',  '#2aa198'],
      \ [ '4',  '#268bd2'],
      \ ]

augroup rainbow_parentheses
  au!
  au VimEnter * RainbowParenthesesActivate
  au BufEnter * RainbowParenthesesLoadRound
  au BufEnter * RainbowParenthesesLoadSquare
  au BufEnter * RainbowParenthesesLoadBraces
augroup END

" IdentLine
let g:indentLine_char = '|'

" NERDTree
map <Leader><tab> :NERDTreeToggle<CR>

" EasyMotion
let g:EasyMotion_use_upper = 1
let g:EasyMotion_smartcase = 1

map <Leader> <Plug>(easymotion-prefix)
nmap s <Plug>(easymotion-s2)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Numbers
let g:numbers_exclude = ['nerdtree']

" React
let g:jsx_ext_required = 0

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']

" Ultisnips config
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<C-SPACE>"
let g:UltiSnipsJumpForwardTrigger="<TAB>"
let g:UltiSnipsJumpBackwardTrigger="<S-TAB>"
