"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set default shell
set shell=/bin/zsh

" Set history limit
set history=1000

" Show current position
set ruler

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ingnore case when searching
set ignorecase
set smartcase

" Improve search
nnoremap <esc><esc> :noh<return>
set incsearch
set hlsearch

" Show matching bracets
set showmatch

" Set numbers
set nu

" Better command autocompletion
set wildmenu

" No redraw
set lazyredraw

" No linespace between rows
set linespace=0

" For regular expressions
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Always display status line
set laststatus=2

" Resize
set textwidth=100

" Show column max
set colorcolumn=100

" Use the clipboard as default register
set clipboard+=unnamedplus
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text files config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,BufReadPost,FileType *.md set filetype=markdown
autocmd BufRead,FileType gitcommit set tw=80
autocmd BufRead,FileType *.md,*.txt,*.tex set wrap linebreak nolist tw=100 colorcolumn=0
autocmd BufRead,FileType gitcommit,*.md,*.txt,*.tex set nonumber
autocmd BufRead,FileType gitcommit,*.md,*.txt,*.tex set formatoptions=1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell Checks
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatic spellchek
autocmd BufRead,BufNewFile,FileType gitcommit,*.md,*.txt,*.tex setlocal spell
set complete+=kspell
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax hl
syntax on

" Set background
set background=light

" Set enconding as utf8
set encoding=utf8
scriptencoding utf-8

set t_Co=256

if has("gui_running")
  set guifont=Monaco
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=l
  set guioptions-=b
  set guioptions-=L
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files and backup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn off backup
set nobackup
set nowb
set noswapfile

" Look for tags
set tags=./tags,./../tags,./*/tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs and indent
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Expands tab
set expandtab

" Auto-indent
set ai
set si
set ci

" Auto-indent amount
set shiftwidth=2
set shiftround

" Tabs
set tabstop=2
set softtabstop=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Define the map leader
let mapleader = "\<Space>"

" Stop using <esc>
inoremap jk <esc>
inoremap <esc> <nop>

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Install vim-plug if not available
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" List of plugins to install
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-trailing-whitespace'
Plug 'scrooloose/nerdtree'

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'

" Tmux integration
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tmux-plugins/vim-tmux'

" Solarized
Plug 'altercation/vim-colors-solarized'

" COC
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" Search Helpers
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins Config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Solarized
colorschem solarized


" NERDTree
function! NERDTreeToggleInCurDir()
  " If NERDTree is open in the current buffer
  if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
    exe ":NERDTreeClose"
  elseif bufname("%") == ""
    exe ":NERDTree"
  else
    exe ":NERDTreeFind"
  endif
endfunction
nmap <silent> <leader>, :call NERDTreeToggleInCurDir()<cr>
nmap <silent> <leader>n :NERDTreeToggle<cr>

" FZF
let g:fzf_layout = { 'down': '~20%' }

map <c-p> :Files<CR>
map <c-b> :Buffers<CR>
nnoremap <c-f> :Rg<Cr>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" COC
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>r <Plug>(coc-rename)
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

" Markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_auto_extension_ext = 'md'
let g:vim_markdown_edit_url_in = 'vsplit'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User defined commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! EditSnippets CocCommand snippets.editSnippets
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Zettle Configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,FileType *.md,*.txt,*.tex nnoremap <c-p> :Rg title<Cr>
autocmd BufRead,FileType *.md,*.txt,*.tex nnoremap <c-t> :Rg tag<Cr>
inoremap <expr> <c-l> fzf#vim#complete("rg -I -N -o -w -U 'id: (\\d+)\\n.*title: (.*)\n' -r '[$2]($1)' " . expand('%:p:h'))

let g:zettle_dir = "~/Documents/Zettle"
let g:zettel_todo = expand(g:zettle_dir) . "/todo.md"

function ZettleNew(title)
  let date = strftime("%Y%m%d%H%M")
  let file = expand(g:zettle_dir) . "/" . date . ".md"
  if empty(glob(file))
    let data = ["---", "- id: ".date, "- title: ".a:title, "- tags:", "---", "", "# ".a:title]
    call writefile(data, file, "a")
    call writefile(["* [".a:title."](".date.")"], g:zettel_todo, "a")
  endif
endfunction
command! -nargs=1 ZettleNew call ZettleNew(<f-args>)

function ZettleTodoOpen()
  silent execute 'vs '. g:zettel_todo
endfunction

function ZettleTodoClose()
  silent execute 'bd '. g:zettel_todo
endfunction

function ZettleTodo()
  let zettel_todo = expand(g:zettle_dir) . "/todo.md"
  echom "todo"
  if (bufwinnr(zettel_todo) > 0)
    call ZettleTodoClose()
  else
    call ZettleTodoOpen()
  endif
endfunction
command! -nargs=0 ZettleTodo call ZettleTodo()
nmap <leader>t :ZettleTodo<cr>
